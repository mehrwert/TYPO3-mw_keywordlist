a:2:{s:4:"meta";a:3:{s:5:"title";s:25:"mehrwert A-Z Keyword List";s:5:"descr";s:138:"Extracts all keywords from the page\'s keyword field and displays a list of keywords and links the page title to the keyword related page.";s:7:"options";a:2:{s:10:"usageCount";N;s:19:"includeCodeAbstract";s:1:"1";}}s:5:"files";a:1:{s:14:"MD5_4f91aa4972";a:4:{s:8:"filename";s:34:"pi1/class.tx_mwkeywordlist_pi1.php";s:8:"filesize";i:17311;s:6:"header";a:5:{s:4:"text";s:161:"

Plugin 'A-Z keyword list with pages linked for the 'mw_keywordlist' extension.
Provides facilities to retriev keywords from the pages and generate a link list
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:15:"@package		TYPO3";i:1;s:28:"@subpackage	tx_mwkeywordlist";i:2;s:75:"@version		$Id$";i:3;s:37:"@author		mehrwert <typo3@mehrwert.de>";i:4;s:13:"@license		GPL";}s:11:"other_index";a:5:{s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:17:"tx_mwkeywordlist ";}s:8:"@version";a:1:{i:0;s:65:"$Id$";}s:7:"@author";a:1:{i:0;s:28:"mehrwert <typo3@mehrwert.de>";}s:8:"@license";a:1:{i:0;s:4:"GPL ";}}}s:3:"DAT";a:9:{i:1;a:8:{s:6:"header";s:49:"class tx_mwkeywordlist_pi1 extends tslib_pibase {";s:5:"class";i:1;s:11:"parentClass";s:20:"tx_mwkeywordlist_pi1";s:4:"cDat";a:5:{s:4:"text";s:161:"

Plugin 'A-Z keyword list with pages linked for the 'mw_keywordlist' extension.
Provides facilities to retriev keywords from the pages and generate a link list
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:15:"@package		TYPO3";i:1;s:28:"@subpackage	tx_mwkeywordlist";i:2;s:75:"@version		$Id$";i:3;s:37:"@author		mehrwert <typo3@mehrwert.de>";i:4;s:13:"@license		GPL";}s:11:"other_index";a:5:{s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:17:"tx_mwkeywordlist ";}s:8:"@version";a:1:{i:0;s:65:"$Id$";}s:7:"@author";a:1:{i:0;s:28:"mehrwert <typo3@mehrwert.de>";}s:8:"@license";a:1:{i:0;s:4:"GPL ";}}}s:7:"content";a:2:{i:0;s:1612:"
	/**
	 * Same as class name
	 * @var	String
	 */
	var $prefixId = 'tx_mwkeywordlist_pi1';

	/**
	 * Path to this script relative to the extension dir.
	 * @var	String
	 */
	var $scriptRelPath = 'pi1/class.tx_mwkeywordlist_pi1.php';

	/**
	 * The extension key.
	 * @var	String
	 */
	var $extKey = 'mw_keywordlist';

	/**
	 * Wether or not to check the cHash.
	 * @var	Boolean
	 */
	var $pi_checkCHash = TRUE;

	/**
	 * Global configuration.
	 * @var	array
	 */
	var $conf;

	/**
	 * Pages read from the pagetree.
	 * @var	array
	 */
	var $pages = array();

	/**
	 * Pages in other languages - also read from the pagetree
	 * @var	array
	 */
	var $pagesLanguageOverlay = array();

	/**
	 * Available chars of active items
	 * @var	array
	 */
	var $existingKeys = array();

	/**
	 * Available chars for jump menu
	 * @var	array
	 */
	var $jumpMenuIndexKeys = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');

	/**
	 * Number of iterations
	 * @var	Integer
	 */
	var $iter_num = 0;

	/**
	 * The pagelist - used in getRecursivePagelist()
	 * @var	Mixed
	 */
	var $pageList;

	/**
	 * If set, workspaces are supported
	 * @var	Boolean
	 */
	var $enableWorkspaces = false;

	/**
	 * Additional option for the where clause
	 * @var	String
	 */
	var $contentDoktypesWhereClause = '';

	/**
	 * Additional option for the where clause
	 * @var	String
	 */
	var $contentDoktypes = '';

	/********************************************
	 *
	 * Main control and dispatcher functions
	 *
	 ********************************************/

	";i:1;i:-1;}s:12:"content_size";i:1612;s:13:"content_lines";i:91;s:6:"atLine";i:58;}i:3;a:8:{s:6:"header";s:103:"function getRecursivePagelist($uid, $maxlevels = 3, $level = 0, $enableFields, $sys_language_uid = 0)	{";s:11:"parentClass";s:20:"tx_mwkeywordlist_pi1";s:11:"sectionText";a:1:{i:0;s:37:"Main control and dispatcher functions";}s:4:"cDat";a:5:{s:4:"text";s:299:"

This function recursively selects pages underneath a certain page uid and
returns the selected values as an array.

Note that this behaviour might cause performance issues under certain
circumstances, such as
- too frequent use of this function
- slow hardware (database server)
- large page tree
";s:5:"param";a:5:{i:0;a:2:{i:0;s:5:"mixed";i:1;s:58:"$uid The uid or a comma separated list of uids of the page";}i:1;a:2:{i:0;s:7:"integer";i:1;s:60:"$maxlevels maximum number of levels to search; defaults to 3";}i:2;a:2:{i:0;s:7:"integer";i:1;s:46:"$level starting level to search; defaults to 0";}i:3;a:2:{i:0;s:6:"string";i:1;s:61:"$enableFields TYPO3 enable fields (the additional part of the";}i:4;a:2:{i:0;s:7:"integer";i:1;s:46:"$sys_language_uid The current sys_language_uid";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:17:"List of all pages";}s:5:"other";a:1:{i:0;s:42:"@todo 				Add support for TYPO3 workspaces";}s:11:"other_index";a:1:{s:5:"@todo";a:1:{i:0;s:32:"Add support for TYPO3 workspaces";}}}s:7:"content";a:2:{i:0;s:507:"
		// Returns an array with pagerows for subpages with pid=$uid (which is pid here!). This is used for menus
		if ($this->pageList == null) {
			$this->pageList = array();
		}

		// Retrieve the pagetree and JOIN relevant translations from table
		// pages_language_overlay (plo) only if necessary - improves performance
		if ($sys_language_uid != 0) {
			$select_fields	= '	
[...]
], $maxlevels, ($level + 1), $enableFields, $sys_language_uid);
						}
					}
				}
			}
		}
		return $this->pageList;
	}

	";i:1;i:1;}s:12:"content_size";i:3828;s:13:"content_lines";i:118;s:6:"atLine";i:168;}i:5;a:7:{s:6:"header";s:32:"function main($content, $conf) {";s:11:"parentClass";s:20:"tx_mwkeywordlist_pi1";s:4:"cDat";a:3:{s:4:"text";s:67:"

The main function. Collect keyword data and prepare HTML output.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:12:"Page content";}i:1;a:2:{i:0;s:5:"array";i:1;s:21:"configuration options";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:17:"HTML Keyword list";}}s:7:"content";a:2:{i:0;s:3:"
		";i:1;i:0;}s:12:"content_size";i:3;s:13:"content_lines";i:1;s:6:"atLine";i:294;}i:7;a:7:{s:6:"header";s:38:"function mw_arraySort(&$value, $key) {";s:11:"parentClass";s:20:"tx_mwkeywordlist_pi1";s:4:"cDat";a:3:{s:4:"text";s:32:"

Callback function for sorting
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:19:"$value of the array";}i:1;a:2:{i:0;s:5:"array";i:1;s:17:"$key of the array";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"			ksort($value);
		}

		// get settings for levels, defaults to 4 if not set
		$levels = (isset($conf['levels'])) ? intval($conf['levels']) : 4;

		// Show debugging information?
		$displayParseTimeInfo = ( $conf['displayParseTimeInfo'] == '1' ? true : false );

		// start performance test
		if ($displayParseTimeInfo) {
			$time_start = $this->microtimeFloat();
		}

		// 
[...]
*************************************
	 *
	 * Various helper functions
	 *
	 ********************************************/

	";i:1;i:1;}s:12:"content_size";i:4692;s:13:"content_lines";i:146;s:6:"atLine";i:303;}i:9;a:8:{s:6:"header";s:31:"function simplifyString($str) {";s:11:"parentClass";s:20:"tx_mwkeywordlist_pi1";s:11:"sectionText";a:1:{i:0;s:24:"Various helper functions";}s:4:"cDat";a:3:{s:4:"text";s:120:"

Convert umlauts in a string for proper sorting in the list
utilizing TYPO3 csConvObj in TYPO3 version 3.7.0 or higher
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:31:"HTML content for the login form";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:31:"Converted string (i.e. ö => oe)";}}s:7:"content";a:2:{i:0;s:507:"
		if (isset($GLOBALS['TSFE']->renderCharset) && $GLOBALS['TSFE']->renderCharset != '') {
			$charset = $GLOBALS['TSFE']->renderCharset;
		}
		else {
			$charset = 'iso-8859-1';
		}

		// Remove leading and trailing whitespace
		$str = trim($str);

		// Compatiblity with older releases of TYPO3 ( < 3.7.0)
		if (t3lib_div::int_from_ver(TYPO3_version) < 3007000) {
			// Conv
[...]
charset, $str, 'toLower');
			$str = $GLOBALS['TSFE']->csConvObj->specCharsToASCII($charset, $str);
		}
		return $str;
	}


	";i:1;i:1;}s:12:"content_size";i:710;s:13:"content_lines";i:26;s:6:"atLine";i:457;}i:11;a:7:{s:6:"header";s:27:"function renderJumpMenu() {";s:11:"parentClass";s:20:"tx_mwkeywordlist_pi1";s:4:"cDat";a:3:{s:4:"text";s:125:"

Render the A-Z jump menu respecting the available keys
while building the alphabet navigation. Only valid keys
are linked.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:26:"HTML code of the jump menu";}}s:7:"content";a:2:{i:0;s:507:"
		// Jump menu
		$jumpMenu = array();

		// Special treatment for special chars and data
		if (in_array('0-9', $this->existingKeys)) {
			$jumpMenu[] = '<a' . $this->pi_classParam('activeLink') . ' href="' . $this->pi_getPageLink($GLOBALS['TSFE']->id, '', '') . '#general' . $this->elUid . '">0-9</a>';
		} else {
			$jumpMenu[] = '<span' . $this->pi_classParam('inactiveLin
[...]
$jumpMenu);
		$jumpMenu = '<div' . $this->pi_classParam('jumpmenu') . '>' . $jumpMenu . '</div>';

		return $jumpMenu;
	}


	";i:1;i:1;}s:12:"content_size";i:1112;s:13:"content_lines";i:27;s:6:"atLine";i:491;}i:13;a:7:{s:6:"header";s:27:"function microtimeFloat() {";s:11:"parentClass";s:20:"tx_mwkeywordlist_pi1";s:4:"cDat";a:3:{s:4:"text";s:67:"

Create timestamps to debug parse- and querytime of the extension
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:7:"seconds";}}s:7:"content";a:2:{i:0;s:94:"		list($usec, $sec) = explode(' ', microtime());
		return ((float)$usec + (float)$sec);
	}


	";i:1;i:0;}s:12:"content_size";i:94;s:13:"content_lines";i:5;s:6:"atLine";i:524;}i:15;a:4:{s:6:"header";s:32:"function setContentPageTypes() {";s:11:"parentClass";s:20:"tx_mwkeywordlist_pi1";s:4:"cDat";a:3:{s:4:"text";s:169:"

Set allowed doktypes based on the user settings. Default value
is $GLOBALS['TYPO3_CONF_VARS']['FE']['content_doktypes']
if the user has set respectContentDoktypes = 1
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:6:"atLine";i:537;}i:17;a:7:{s:6:"header";s:43:"function setContentPageTypesWhereClause() {";s:11:"parentClass";s:20:"tx_mwkeywordlist_pi1";s:4:"cDat";a:3:{s:4:"text";s:56:"

Sets the SQL-Statement used later in the WHERE-clause
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:390:"		if (!empty($this->contentDoktypes)) {
			$this->contentDoktypesWhereClause = ' AND pages.doktype IN ('. $this->contentDoktypes .')';
		}
	}
}

if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/mw_keywordlist/pi1/class.tx_mwkeywordlist_pi1.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/mw_keywordlist/pi1/class.tx_mwkeywordlist_pi1.php']);
}

?>";i:1;i:0;}s:12:"content_size";i:390;s:13:"content_lines";i:10;s:6:"atLine";i:555;}}}}}